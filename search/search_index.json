{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"So You Wana Be an AI Scientist? The evolution of people having the ability to intepret data has evolved over the years. Statistician, Data Analyst, Data Scientist, and now a new kid of the block, AI scientist is borne. They are more or less related in various ways, but the latter is predominantly involved in predictive learning solutions using Neural Networks (NN). This page will deal with the basics of NN, including the various frameworks, transfer-learning, and other tools that will allow one to kick start his/her career. Do check out my accompanying website on AI Engineering that provides essential guides on engineering aspects of machine learning.","title":"Introduction"},{"location":"#so-you-wana-be-an-ai-scientist","text":"The evolution of people having the ability to intepret data has evolved over the years. Statistician, Data Analyst, Data Scientist, and now a new kid of the block, AI scientist is borne. They are more or less related in various ways, but the latter is predominantly involved in predictive learning solutions using Neural Networks (NN). This page will deal with the basics of NN, including the various frameworks, transfer-learning, and other tools that will allow one to kick start his/her career. Do check out my accompanying website on AI Engineering that provides essential guides on engineering aspects of machine learning.","title":"So You Wana Be an AI Scientist?"},{"location":"keras/","text":"Keras","title":"Keras"},{"location":"keras/#keras","text":"","title":"Keras"},{"location":"pytorch/","text":"Pytorch Pytorch is likely the most popular neural network framework given its ease of use compared to Tensorflow, and having more options then the high level framework Keras. GPU Pytorch is able to use GPU to accelerate its processing speed. Activate CUDA Sometimes, just adding cuda will not work, but we have to specify the device id, i.e. cuda:0 import torch print ( 'PyTorch Version:' , torch . __version__ ) device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) if device . type == 'cuda' : print ( 'Number of GPUs:' , torch . cuda . device_count ()) print ( 'Device properties:' , torch . cuda . get_device_properties ( 0 )) print ( 'Device ID:' , torch . cuda . current_device ()) print ( 'Device Name:' , torch . cuda . get_device_name ( 0 )) Number of GPUs: 1 Device properties: _CudaDeviceProperties ( name = 'Quadro P1000' , major = 6 , minor = 1 , total_memory = 4040MB, multi_processor_count = 4 ) Device ID: 0 Device Name: Quadro P1000 Model # check if using gpu next ( model . parameters ()) . is_cuda # use gpu model . cuda () # or model . to ( device ) Data a = torch . FloatTensor ([ 1.0 , 2.0 ]) # check if using gpu a . device # use gpu a . cuda () # or a . to ( device ) from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 33 ) X_train = torch . FloatTensor ( X_train ) . cuda () X_test = torch . FloatTensor ( X_test ) . cuda () y_train = torch . LongTensor ( y_train ) . cuda () y_test = torch . LongTensor ( y_test ) . cuda ()","title":"Pytorch"},{"location":"pytorch/#pytorch","text":"Pytorch is likely the most popular neural network framework given its ease of use compared to Tensorflow, and having more options then the high level framework Keras.","title":"Pytorch"},{"location":"pytorch/#gpu","text":"Pytorch is able to use GPU to accelerate its processing speed.","title":"GPU"},{"location":"pytorch/#activate-cuda","text":"Sometimes, just adding cuda will not work, but we have to specify the device id, i.e. cuda:0 import torch print ( 'PyTorch Version:' , torch . __version__ ) device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) if device . type == 'cuda' : print ( 'Number of GPUs:' , torch . cuda . device_count ()) print ( 'Device properties:' , torch . cuda . get_device_properties ( 0 )) print ( 'Device ID:' , torch . cuda . current_device ()) print ( 'Device Name:' , torch . cuda . get_device_name ( 0 )) Number of GPUs: 1 Device properties: _CudaDeviceProperties ( name = 'Quadro P1000' , major = 6 , minor = 1 , total_memory = 4040MB, multi_processor_count = 4 ) Device ID: 0 Device Name: Quadro P1000","title":"Activate CUDA"},{"location":"pytorch/#model","text":"# check if using gpu next ( model . parameters ()) . is_cuda # use gpu model . cuda () # or model . to ( device )","title":"Model"},{"location":"pytorch/#data","text":"a = torch . FloatTensor ([ 1.0 , 2.0 ]) # check if using gpu a . device # use gpu a . cuda () # or a . to ( device ) from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 33 ) X_train = torch . FloatTensor ( X_train ) . cuda () X_test = torch . FloatTensor ( X_test ) . cuda () y_train = torch . LongTensor ( y_train ) . cuda () y_test = torch . LongTensor ( y_test ) . cuda ()","title":"Data"},{"location":"tensorboard/","text":"","title":"Tensorboard"},{"location":"tensorflow/","text":"Tensorflow GPU import tensorflow as tf print ( 'TensorFlow Version:' , tf . __version__ ) device = tf . test . gpu_device_name () or 'CPU' print ( 'Using device:' , device )","title":"Tensorflow"},{"location":"tensorflow/#tensorflow","text":"","title":"Tensorflow"},{"location":"tensorflow/#gpu","text":"import tensorflow as tf print ( 'TensorFlow Version:' , tf . __version__ ) device = tf . test . gpu_device_name () or 'CPU' print ( 'Using device:' , device )","title":"GPU"},{"location":"transferlearning/","text":"","title":"Transferlearning"}]}